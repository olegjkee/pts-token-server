const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

// –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'admin123PTS';

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());
app.use(express.static(__dirname)); // –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤

let currentToken = { name: 'GMGN Token', contract: 'Ey59PH7Z4BFU4HjyKnyMdWt5GGN76KazTAwQihoUXRnk' };
let nextToken = null; // –¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π –ø–æ —Ç–∞–π–º–µ—Ä—É
let nextUpdateTime = Date.now() + (2 * 60 * 60 * 1000); // –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
function checkAdminAuth(req, res, next) {
    const password = req.headers['x-admin-password'] || req.body.password;
    if (password !== ADMIN_PASSWORD) {
        return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }
    next();
}

// –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É
function switchToNextToken() {
    if (nextToken) {
        currentToken = { ...nextToken };
        nextToken = null; // –û—á–∏—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã
        console.log(`–¢–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–µ–Ω –Ω–∞: ${currentToken.contract}`);
    } else {
        console.log('–°–ª–µ–¥—É—é—â–∏–π —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è');
    }
    nextUpdateTime = Date.now() + (2 * 60 * 60 * 1000); // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 2 —á–∞—Å–∞
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
    if (Date.now() >= nextUpdateTime) {
        switchToNextToken();
    }
}, 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get('/', (req, res) => {
    res.sendFile(__dirname + '/index.html');
});

app.get('/token', (req, res) => {
    console.log('–ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞:', currentToken);
    res.json(currentToken);
});

app.get('/admin-status', checkAdminAuth, (req, res) => {
    const status = { 
        currentToken, 
        nextToken, 
        nextUpdateTime,
        timeLeft: nextUpdateTime - Date.now()
    };
    console.log('–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∫–∏:', status);
    res.json(status);
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
app.post('/admin-login', (req, res) => {
    const { password } = req.body;
    if (password === ADMIN_PASSWORD) {
        res.json({ success: true, message: '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω' });
    } else {
        res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }
});

app.post('/set-next-token', checkAdminAuth, (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å set-next-token:', req.body);
    const { contract, name } = req.body;
    
    if (!contract) {
        return res.status(400).json({ success: false, error: 'Contract required' });
    }
    
    nextToken = { name: name || 'Custom Token', contract };
    console.log('–°–ª–µ–¥—É—é—â–∏–π —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', nextToken);
    res.json({ success: true, nextToken });
});

app.post('/switch-now', checkAdminAuth, (req, res) => {
    console.log('–ó–∞–ø—Ä–æ—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–º–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞');
    if (nextToken) {
        switchToNextToken();
        res.json({ success: true, currentToken });
    } else {
        res.json({ success: false, error: 'No next token set' });
    }
});

app.post('/reset-timer', checkAdminAuth, (req, res) => {
    console.log('–°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞');
    nextUpdateTime = Date.now() + (2 * 60 * 60 * 1000);
    res.json({ success: true, nextUpdateTime });
});

app.listen(port, '0.0.0.0', () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
    console.log(`üåê –î–æ—Å—Ç—É–ø–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –Ω–∞ http://[YOUR_IP]:${port}`);
    console.log(`–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: ${currentToken.name} - ${currentToken.contract}`);
});
